generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  password     String
  name         String
  email        String?       @unique
  phone        String?
  role         UserRole      @default(CABELEIREIRO)
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  reminders    Reminder[]

  @@map("users")
}

model Client {
  id           String        @id @default(uuid())
  name         String
  email        String?       @unique
  phone        String?
  birthDate    DateTime?
  address      String?
  observations String?
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  reminders    Reminder[]

  @@map("clients")
}

model Procedure {
  id                    String                 @id @default(uuid())
  name                  String
  description           String?
  category              String?                // Categoria do procedimento
  duration              Int
  price                 Decimal                @db.Decimal(10, 2)
  active                Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  appointmentProcedures AppointmentProcedure[]
  procedureProducts     ProcedureProduct[]

  @@map("procedures")
}

model Product {
  id                String             @id @default(uuid())
  name              String
  description       String?
  category          String?            // Categoria do produto
  type              ProductType
  price             Decimal?           @db.Decimal(10, 2)
  stock             Int                @default(0)
  minStock          Int                @default(0)
  unit              String?
  unitQuantity      Decimal?           @db.Decimal(10, 2) // Quantidade por unidade (ex: 100ml)
  unitMeasurement   String?            // Unidade de medida (ml, g, etc)
  addToCost         Boolean            @default(false) // Se deve ser adicionado como custo ao financeiro
  active            Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  procedureProducts ProcedureProduct[]
  stockMovements    StockMovement[]
  productUsages     ProductUsage[]

  @@map("products")
}

model StockMovement {
  id        String          @id @default(uuid())
  productId String
  type      TransactionType
  quantity  Int
  reason    String?
  createdAt DateTime        @default(now())
  product   Product         @relation(fields: [productId], references: [id])

  @@index([productId], map: "stock_movements_productId_fkey")
  @@map("stock_movements")
}

model ProcedureProduct {
  id          String    @id @default(uuid())
  procedureId String
  productId   String
  procedure   Procedure @relation(fields: [procedureId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@unique([procedureId, productId])
  @@index([productId], map: "procedure_products_productId_fkey")
  @@map("procedure_products")
}

model Appointment {
  id                String                 @id @default(uuid())
  clientId          String
  userId            String
  date              DateTime
  startTime         DateTime
  endTime           DateTime?
  status            AppointmentStatus      @default(AGENDADO)
  paymentMethod     PaymentMethod?
  totalPrice        Decimal?               @db.Decimal(10, 2)
  discount          Decimal?               @db.Decimal(10, 2)
  partialPayment    Decimal?               @db.Decimal(10, 2) // Pagamento parcial (50%)
  finalPrice        Decimal?               @db.Decimal(10, 2) // Preço final após descontos e taxas
  cardTax           Decimal?               @db.Decimal(5, 4)  // Taxa do cartão aplicada
  paymentData       String?                // JSON com dados de pagamento detalhados
  observations      String?
  comandaOpenedAt   DateTime?              // Quando a comanda foi aberta
  comandaClosedAt   DateTime?              // Quando a comanda foi finalizada
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  procedures        AppointmentProcedure[]
  productUsages     ProductUsage[]         // Produtos utilizados na comanda
  client            Client                 @relation(fields: [clientId], references: [id])
  user              User                   @relation(fields: [userId], references: [id])

  @@index([clientId], map: "appointments_clientId_fkey")
  @@index([userId], map: "appointments_userId_fkey")
  @@map("appointments")
}

model AppointmentProcedure {
  id            String      @id @default(uuid())
  appointmentId String
  procedureId   String
  price         Decimal     @db.Decimal(10, 2)
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  procedure     Procedure   @relation(fields: [procedureId], references: [id])

  @@unique([appointmentId, procedureId])
  @@index([procedureId], map: "appointment_procedures_procedureId_fkey")
  @@map("appointment_procedures")
}

model ProductUsage {
  id              String      @id @default(uuid())
  appointmentId   String
  productId       String
  quantityUsed    Decimal     @db.Decimal(10, 2) // Quantidade utilizada (pode ser em ml, g, etc)
  unitCost        Decimal?    @db.Decimal(10, 2) // Custo por unidade no momento do uso
  totalCost       Decimal?    @db.Decimal(10, 2) // Custo total calculado
  createdAt       DateTime    @default(now())
  appointment     Appointment @relation(fields: [appointmentId], references: [id])
  product         Product     @relation(fields: [productId], references: [id])

  @@index([appointmentId], map: "product_usages_appointmentId_fkey")
  @@index([productId], map: "product_usages_productId_fkey")
  @@map("product_usages")
}

model FinancialTransaction {
  id          String          @id @default(uuid())
  type        TransactionType
  category    String
  description String
  amount      Decimal         @db.Decimal(10, 2)
  date        DateTime
  isPaid      Boolean         @default(false)
  dueDate     DateTime?
  recurrent   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("financial_transactions")
}

model Reminder {
  id          String       @id @default(uuid())
  type        ReminderType
  title       String
  description String?
  date        DateTime
  userId      String?
  clientId    String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  client      Client?      @relation(fields: [clientId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])

  @@index([clientId], map: "reminders_clientId_fkey")
  @@index([userId], map: "reminders_userId_fkey")
  @@map("reminders")
}

enum UserRole {
  ADMIN
  CABELEIREIRO
}

enum AppointmentStatus {
  AGENDADO
  CONFIRMADO
  CONCLUIDO
  CANCELADO
}

enum PaymentMethod {
  PIX
  DINHEIRO
  CARTAO_DEBITO
  CARTAO_CREDITO_1X
  CARTAO_CREDITO_2X
  CARTAO_CREDITO_3X
  CARTAO_CREDITO_ACIMA_3X
}

enum ProductType {
  USO_INTERNO
  VENDA_DIRETA
}

enum ReminderType {
  ANIVERSARIO
  MANUAL
  PRODUTO_BAIXO
  AGENDAMENTO
}

enum TransactionType {
  RECEITA
  DESPESA
}
