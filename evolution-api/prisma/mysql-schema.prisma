generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_CONNECTION_URI")
}

model Instance {
  id         String   @id @default(cuid())
  name       String   @unique
  clientName String?  @map("client_name")
  token      String?
  number     String?
  qrcode     Boolean? @default(false) 
  status     String?  @default("close")
  serverUrl  String?  @map("server_url")
  apikey     String?
  ownerJid   String?  @map("owner_jid")
  profileName String? @map("profile_name")
  profilePicUrl String? @map("profile_pic_url")
  connectionStatus String? @map("connection_status") @default("close")
  integration String? @default("WHATSAPP-BAILEYS")
  businessId String? @map("business_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  Setting   Setting[]
  Chatwoot  Chatwoot[]
  Proxy     Proxy[]
  Rabbitmq  Rabbitmq[]
  Nats      Nats[]
  Sqs       Sqs[]
  Websocket Websocket[]
  Webhook   Webhook[]
  Contact   Contact[]
  Chat      Chat[]
  Message   Message[]

  @@map("instances")
}

model Setting {
  id           String   @id @default(cuid())
  instanceId   String   @map("instance_id") @unique
  rejectCall   Boolean? @map("reject_call") @default(false)
  msgCall      String?  @map("msg_call")
  groupsIgnore Boolean? @map("groups_ignore") @default(false)
  alwaysOnline Boolean? @map("always_online") @default(false)
  readMessages Boolean? @map("read_messages") @default(false)
  readStatus   Boolean? @map("read_status") @default(false)
  syncFullHistory Boolean? @map("sync_full_history") @default(false)
  wavoipToken String? @map("wavoip_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model Chatwoot {
  id        String   @id @default(cuid())
  enabled   Boolean? @default(false)
  accountId String?  @map("account_id")
  token     String?
  url       String?
  signMsg   Boolean? @map("sign_msg") @default(false)
  number    String?
  nameInbox String?  @map("name_inbox")
  reopenConversation Boolean? @map("reopen_conversation") @default(false)
  conversationPending Boolean? @map("conversation_pending") @default(false)
  importContacts Boolean? @map("import_contacts") @default(false)
  mergeBrazilContacts Boolean? @map("merge_brazil_contacts") @default(false)
  importMessages Boolean? @map("import_messages") @default(false)  
  daysLimitImportMessages Int? @map("days_limit_import_messages") @default(60)
  organization String?
  logo      String?
  instanceId String  @map("instance_id")
  autoCreate Boolean? @map("auto_create") @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("chatwoot")
}

model Proxy {
  id         String   @id @default(cuid())
  enabled    Boolean? @default(false)
  host       String?
  port       String?
  protocol   String?
  username   String?
  password   String?
  instanceId String   @map("instance_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("proxy")
}

model Rabbitmq {
  id         String   @id @default(cuid())
  enabled    Boolean? @default(false)
  instanceId String   @map("instance_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("rabbitmq")
}

model Nats {
  id         String   @id @default(cuid())
  enabled    Boolean? @default(false)
  instanceId String   @map("instance_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("nats")
}

model Sqs {
  id         String   @id @default(cuid())
  enabled    Boolean? @default(false)
  instanceId String   @map("instance_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("sqs")
}

model Websocket {
  id         String   @id @default(cuid())
  enabled    Boolean? @default(false)
  instanceId String   @map("instance_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("websocket")
}

model Webhook {
  id         String   @id @default(cuid())
  url        String?
  byEvents   Boolean? @map("by_events") @default(false)
  base64     Boolean? @default(false)
  enabled    Boolean? @default(false)
  instanceId String   @map("instance_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@map("webhook")
}

model Contact {
  id           String   @id @default(cuid())
  remoteJid    String   @map("remote_jid")
  pushName     String?  @map("push_name")
  profilePicUrl String? @map("profile_pic_url")
  instanceId   String   @map("instance_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@unique([remoteJid, instanceId])
  @@map("contacts")
}

model Chat {
  id         String   @id @default(cuid())
  remoteJid  String   @map("remote_jid")
  name       String?
  instanceId String   @map("instance_id")
  unreadMessages Int? @map("unread_messages") @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@unique([remoteJid, instanceId])
  @@map("chats")
}

model Message {
  id           String   @id @default(cuid())
  keyRemoteJid String   @map("key_remote_jid")
  keyFromMe    Boolean  @map("key_from_me")
  keyId        String   @map("key_id")
  pushName     String?  @map("push_name")
  participant  String?
  messageType  String?  @map("message_type")
  message      String?  @db.LongText
  mediaUrl     String?  @map("media_url")
  timestamp    BigInt?
  status       String?
  instanceId   String   @map("instance_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@unique([keyId, keyRemoteJid, instanceId])
  @@map("messages")
}